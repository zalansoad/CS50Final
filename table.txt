Tables:
CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, username TEXT NOT NULL, hash TEXT NOT NULL, type TEXT NOT NULL DEFAULT 'user');
CREATE UNIQUE INDEX username ON users (username);

CREATE TABLE admin (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_name TEXT NOT NULL, hash TEXT NOT NULL);
CREATE UNIQUE INDEX admin_name ON admin (admin_name);

-------------ORDER TABLE ----------------

CREATE TABLE myorder (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
user_id INTEGER NOT NULL,
user_name TEXT NOT NULL,
pizza_name TEXT,
drinks TEXT,
price FLOAT NOT NULL,
time TEXT NOT NULL,
status TEXT NOT NULL DEFAULT 'Order received',
first_name TEXT NOT NULL,
last_name TEXT NOT NULL,
street TEXT NOT NULL,
city TEXT NOT NULL,
zip TEXT NOT NULL,
terms TEXT NOT NULL,
FOREIGN KEY (user_id) REFERENCES users(id),
FOREIGN KEY (user_name) REFERENCES users(username));

-------------INGREDIENTS TABLE ----------------

CREATE TABLE ingredients (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
name TEXT NOT NULL,
price FLOAT NOT NULL,);

INSERT INTO ingredients (name, price)
VALUES 
  ('Olives', 1.50),
  ('Onions', 1.25),
  ('Bell Peppers', 1.75),
  ('Spinach', 1.50),
  ('Feta Cheese', 2.00),
  ('Artichokes', 2.25),
  ('Basil', 1.50),
  ('Chicken', 2.50),
  ('Cherry Tomatoes', 1.75),
  ('Pine Nuts', 2.00);



-------------PIZZA TABLE ----------------

CREATE TABLE pizzas (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
name TEXT NOT NULL,
ingredients TEXT NOT NULL,
img TEXT NOT NULL,
price FLOAT NOT NULL);

INSERT INTO pizzas (name, ingredients, img, price)
VALUES 
  ('Bacon Pizza', 'Bacon, Mozzarella, Tomato Sauce, Red Onions', '/static/imgages/bacon.jpg', 14.99),
  ('Mushroom Pizza', 'Mushrooms, Mozzarella, Tomato Sauce, Garlic', '/static/imgages/mushroom.jpg', 13.99),
  ('Hawaiian Pizza', 'Ham, Pineapple, Mozzarella, Tomato Sauce', '/static/imgages/hawaii.jpg', 15.99),
  ('Jalapeno Pizza', 'Jalapenos, Pepper Jack Cheese, Tomato Sauce, Red Peppers', '/static/imgages/jalapeno.jpg', 16.99),
  ('Margherita Pizza', 'Fresh Basil, Mozzarella, Tomato Sauce, Olive Oil', '/static/imgages/margherita.jpg', 12.99),
  ('Ham and Cheese Pizza', 'Ham, Mushrooms, Mozzarella, Tomato Sauce', '/static/imgages/ham.jpg', 14.99);

INSERT INTO pizzas (name, ingredients, img, price)
VALUES 
  ('Papito', 'Corn, Pepperoni, Mozzarella, Tomato Sauce, Red Onions, Bell Peppers, Olives', '/static/images/papito.jpg', 15.99),
  ('Corn', 'Corn, Mozzarella, Tomato Sauce, Parmesan, Basil', '/static/images/corn.jpg', 14.99),
  ('Nutella', 'Nutella, Banana', '/static/images/nutella.jpg', 12.99),
  ('Four Cheese', 'Mozzarella, Parmesan, Ricotta, Gorgonzola, Tomato Sauce', '/static/images/4cheese.jpg', 15.99),
  ('Pepperoni', 'Pepperoni, Mozzarella, Tomato Sauce, Oregano', '/static/images/pepperoni.jpg', 14.99),
  ('Shongoku', 'Ham, Mushrooms, Mozzarella, Tomato Sauce, Red Onions, Olives, Garlic', '/static/images/shongoku.jpg', 16.99);


CREATE TABLE drinks (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
name TEXT NOT NULL,
price FLOAT NOT NULL,
img TEXT NOT NULL);

INSERT INTO drinks (name, price, img)
VALUES 
  ('Coca-Cola', 2.00, '/static/imgages/coca.jpg'),
  ('Sprite', 2.00, '/static/imgages/sprite.jpg'),
  ('Iced Tea', 1.75, '/static/imgages/tea.jpg'),
  ('Kinley Pink Berry', 2.25, '/static/imgages/kinley.jpg'),
  ('Fanta Orange', 2.00, '/static/imgages/fanta.jpg'),
  ('Mineral Water', 1.50, '/static/imgages/mineral_water.jpg'),
  ('RedBull', 2.25, '/static/imgages/redbull.jpg'),
  ('Beer', 2.25, '/static/imgages/beer.jpg'),
  
CREATE TABLE comments (
id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
user_id INTEGER NOT NULL,
pizza_id INTEGER NOT NULL,
comment TEXT NOT NULL,
FOREIGN KEY(user_id) REFERENCES users(id),
FOREIGN KEY(pizza_id) REFERENCES pizzas(id)
);


git fetch origin




user>pizza>ingredients>order

@app.route("/cart", methods=["GET", "POST"])
@login_required
def cart():

    #Ensure cart exists
    if "cart" not in session:
        session["cart"] = {"pizzas": [], "drinks": []}
        #session["cart"] = {"allpizzaorder": [], "drinks": []}
        #allpizzaorder = [[{'pid': pizzaid}, {'extra':choseningredid}]]
    
    chosenpizzaid = None
    chosendrinkid = None
    choseningredid = []
    
    if request.method == "POST":
        #checking if it is a pizza order
        if "pizzaid" in request.form:
            try:
                chosenpizzaid = int(request.form.get("pizzaid"))
                choseningredid = [value for value in request.form.getlist('ingredid') if value]
                    
            except:
                abort(404)
        
        if "drinkid" in request.form:
            try:
                chosendrinkid = int(request.form.get("drinkid"))
            except:
                abort(404)
        
        #if item id captured adding it to the session dict
        if chosenpizzaid:
            session["cart"]["pizzas"].append(chosenpizzaid)
        if chosendrinkid:
            session["cart"]["drinks"].append(chosendrinkid)
        
        #iterating over session dict and qerying them one by one, since the 'IN' sql query did not return a value twice.
        #E.g. I added two pizzas of the same kind and the cart only registered it once because. 
        pizza_order = []
        for id in session["cart"]["pizzas"]:
            pizza_order.append(db.execute("SELECT * FROM pizzas WHERE id = ?", id))
        
        extraingred = []
        for id in choseningredid:
            extraingred.append(db.execute("SELECT * FROM ingredients WHERE id = ?", id))

        drink_order = []
        for drink_id in session["cart"]["drinks"]:
            drink_order.append(db.execute("SELECT * FROM drinks WHERE id = ?", drink_id))
        
        return render_template("cart.html", pizza_order=pizza_order, drink_order=drink_order, extraingred=extraingred)

    
    pizza_order = []
    for id in session["cart"]["pizzas"]:
        pizza_order.append(db.execute("SELECT * FROM pizzas WHERE id = ?", id))
        
    drink_order = []
    for drink_id in session["cart"]["drinks"]:
        drink_order.append(db.execute("SELECT * FROM drinks WHERE id = ?", drink_id))
        
    return render_template("cart.html", pizza_order=pizza_order, drink_order=drink_order, choseningredid=choseningredid)

if request.method == "POST":
        #checking if it is a pizza order
        if "pizzaid" in request.form:
            try:
                chosenpizzaid = int(request.form.get("pizzaid"))
                choseningredid = [value for value in request.form.getlist('ingredid') if value]
                    
            except:
                abort(404)
        
        if "drinkid" in request.form:
            try:
                chosendrinkid = int(request.form.get("drinkid"))
            except:
                abort(404)



admin page, myorder dropdown
ajax
front end
cacheles